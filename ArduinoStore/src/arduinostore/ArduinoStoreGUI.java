/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arduinostore;

import javax.swing.*;
import java.io.*;
import java.io.IOException;
import java.util.List;
/**
 *
 * @author orion
 */
public class ArduinoStoreGUI extends javax.swing.JFrame {
    
    private int index = -1;
    
    // Set URL to connect 
    // Adjust url depending on the server ip address
    private String link = "http://129.97.60.192";
    private DefaultListModel fList = new DefaultListModel();
    
    /**
     * Creates new form NewJFrame
     */
    public ArduinoStoreGUI() {
        initComponents();
        fileList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listPanel = new javax.swing.JPanel();
        listPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        downloadBt = new javax.swing.JButton();
        uploadBt = new javax.swing.JButton();
        refreshBt = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        listPane.setViewportView(fileList);
        fileList.setModel(fList);

        javax.swing.GroupLayout listPanelLayout = new javax.swing.GroupLayout(listPanel);
        listPanel.setLayout(listPanelLayout);
        listPanelLayout.setHorizontalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPane, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addContainerGap())
        );
        listPanelLayout.setVerticalGroup(
            listPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPane)
                .addContainerGap())
        );

        downloadBt.setText("download");
        downloadBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtActionPerformed(evt);
            }
        });

        uploadBt.setText("upload");
        uploadBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtActionPerformed(evt);
            }
        });

        refreshBt.setText("refresh");
        refreshBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadBt, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                    .addComponent(downloadBt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshBt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(uploadBt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadBt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshBt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        titleLabel.setFont(new java.awt.Font("Iowan Old Style", 0, 18)); // NOI18N
        titleLabel.setText("Arduino Store 1.0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtActionPerformed
        // Choose the file to upload
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Gets file data and name
            File file = fileChooser.getSelectedFile();
            String fileName = fileChooser.getSelectedFile().getName();
            
            // Determine length of file name and extension type
            int length = fileName.length();
            int lastP = length - 1;
            
            while(fileName.charAt(lastP) != '.' && lastP>0){
                lastP--;
            }
            
            int lenEx = length-lastP-1;
            int lenName = length-lenEx-1;
            
            // Allows the upload of only acceptable files
            if(lenName<=8 && lenEx<=3){
                String charset = "UTF-8";
                String requestURL = link+"/";

                try {
                    MultipartUtility multipart = new MultipartUtility(requestURL, charset);

                    multipart.addHeaderField("User-Agent", "SE");
                    multipart.addHeaderField("Test-Header", "Header-Value");
                    multipart.addHeaderField("Content-Length", Long.toOctalString(file.length()));

                    //multipart.addFormField(fileName, "Cool Pictures");
                    //multipart.addFormField("keywords", "Java,upload,Spring");

                    multipart.addFilePart("fileUpload", file);

                    List<String> response = multipart.finish();

                    System.out.println("SERVER REPLIED:");

                    for (String line : response) {
                        System.out.println(line);
                    }
                } catch (IOException ex) {
                    System.err.println(ex);
                }
            }
            // Otherwise display appropriate errors
            else if(lenEx>3 && lenName>8) System.out.println("File not accepted.");
            else if(lenName>8) System.out.println("File name too long.");
            else System.out.println("File type not accepted.");
        
        }else {
            // Show if the user manually exits the selection pane
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_uploadBtActionPerformed

    private void downloadBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtActionPerformed
        // Finds the item selected in the list
        int index = fileList.getSelectedIndex();
        String fileName = fileList.getSelectedValue();
        
        // Lets the user choose the directory to which to save the file
        JFileChooser chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose Save Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        
        String saveDir = "";
        
        if (returnVal == JFileChooser.APPROVE_OPTION){
            saveDir = ""+chooser.getCurrentDirectory();
            System.out.println(saveDir);

            // Determines the URL to request the file from
            String fileURL = link+"/"+fileName;

           // Save the file to the given directory
            try {
                HttpDownloadUtility.downloadFile(fileURL, saveDir);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }else {
            // Show if the user manually exits the selection pane
            System.out.println("File download cancelled by user.");
        }
    }//GEN-LAST:event_downloadBtActionPerformed

    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileListValueChanged
                
        //Checks item selected from list
        if (evt.getValueIsAdjusting() == false) {
            if (fileList.getSelectedIndex() == -1) {
            //No selection, disable fire button.
                downloadBt.setEnabled(false);

            } else {
            //Selection, enable the fire button.
                index = fileList.getSelectedIndex();
                downloadBt.setEnabled(true);
            }
        }   
    }//GEN-LAST:event_fileListValueChanged

    private void refreshBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtActionPerformed

        String saveDir = "";
        
        //Check the users operating system to determine where to save the file list
        
        String OS = (System.getProperty("os.name")).toUpperCase();
        //if it is some version of Windows
        if (OS.contains("WIN"))
            {
            //it is simply the location of the "AppData" folder
                saveDir = System.getenv("AppData");
            }
                //Otherwise, we assume Linux or Mac
            else
            {
                //in either case, we would start in the user's home directory
                saveDir = System.getProperty("user.home");
                //if we are on a Mac, we are not done, we look for "Application Support"
                saveDir += "/Library/Application Support";
            }
        
        // Saves the file list to the given directory
        
        try {
            RefreshRequest.getFiles(link+"/filelist.txt", saveDir);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        // Sets a reader to read each file in the text file
        
        try{
            // Open the reader and a new file to write to
            FileReader fReader = new FileReader(saveDir+"/filelist.txt");
            BufferedReader reader = new BufferedReader(fReader);
            String line = reader.readLine();
            DefaultListModel files = new DefaultListModel();
            
            // Read every line in the file and write it to the file
            while(line != null){
                files.addElement(line);
                line = reader.readLine();
            }
            
            // Display the files to see
            fileList.setModel(files);
        }
        catch (IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_refreshBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArduinoStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArduinoStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArduinoStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArduinoStoreGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArduinoStoreGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadBt;
    private javax.swing.JList<String> fileList;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane listPane;
    private javax.swing.JPanel listPanel;
    private javax.swing.JButton refreshBt;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton uploadBt;
    // End of variables declaration//GEN-END:variables
}